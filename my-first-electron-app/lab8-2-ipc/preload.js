const { contextBridge, ipcRenderer } = require('electron');

console.log('üåâ [PRELOAD] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ security bridge...');

contextBridge.exposeInMainWorld('electronAPI', {
  // üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Main Process
  sendMessage: (message) => {
    console.log('üì§ [PRELOAD] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', message);
    return ipcRenderer.invoke('send-message', message);
  },

  // üëã Hello function ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  sayHello: (name) => {
    console.log('üëã [PRELOAD] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢:', name);
    return ipcRenderer.invoke('say-hello', name);
  },

  // üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
  getAgents: () => {
    console.log('üìä [PRELOAD] ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents');
    return ipcRenderer.invoke('get-agents');
  },

  // üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent
  changeAgentStatus: (agentId, newStatus) => {
    console.log(`üîÑ [PRELOAD] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${agentId} ‡πÄ‡∏õ‡πá‡∏ô ${newStatus}`);
    return ipcRenderer.invoke('change-agent-status', { agentId, newStatus });
  },

  // üîê ‡∏£‡∏∞‡∏ö‡∏ö login (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÉ‡∏ô preload)
  login: (agentId, password) => {
    console.log(`üîê [PRELOAD] ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ login: ${agentId}`);
    return ipcRenderer.invoke('login', { agentId, password });
  },

  // üîî ‡∏£‡∏±‡∏ö notification ‡∏à‡∏≤‡∏Å main
  onAgentStatusChanged: (callback) => {
    console.log('üîî [PRELOAD] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    return ipcRenderer.on('agent-status-changed', (event, data) => callback(data));
  }
});

console.log('‚úÖ [PRELOAD] Security bridge ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß');